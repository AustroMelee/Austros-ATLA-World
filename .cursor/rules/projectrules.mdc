---
description: |
  Global Project Rules for all code, automation, and AI-driven activity.
  This file is the single source of truth for standards, coding, review, and all system output.
globs:
  - "**/*"
alwaysApply: true
---

# projectrules.mdc

## Knowledge Base & Context

- Always refer to `projectrules.mdc` for context. Do not code outside the context provided here.
- If unclear, check this file before proceeding.
- Always verify claims or implementations against project context. No assumptions.
- Always check the current file content before making changes.

---

## Feature Development & Process

- For each file, provide all edits in a single chunk. Do not split a single file’s edits.
- Only modify what is explicitly requested or described.
- Do not suggest updates or fixes unless actual modifications are being made.

---

## Communication & Output

- Never use apologies in any message or doc.
- No comments about “understanding” or “got it.”
- No summaries unless explicitly asked for a summary after an edit.
- Don’t ask for confirmation of information already present.
- Never suggest whitespace-only changes unless directly requested.
- Always link to the real file, not a temp or context path.
- Don’t discuss current implementation unless directly asked or contextually necessary.

---

## Coding, Testing, and Standards

- Do not remove or alter unrelated code or functionality.
- Prefer descriptive, explicit variable names for readability.
- Match the project’s established style (spacing, naming, etc).
- Consider and optimize for performance in suggestions.
- Consider security with every change. No vulnerabilities or leaks.
- Include or suggest robust unit tests for all new/changed logic.
- Implement robust error handling/logging—no silent failures.
- Encourage/reinforce modular, single-responsibility design.
- Ensure all suggestions are compatible with project versions.
- Use named constants instead of unexplained values.
- Always handle and document edge cases.
- Use assertions to enforce assumptions and catch errors early.

---

## Implementation & Change Process

- Don’t ask the user to verify changes visible in the context. Use automated checks/tests if needed.
- Never remove code unrelated to the current change, unless instructed.

---

## Cursor/Agent Execution Rules

- **Always proceed:** Cursor and all automation agents must keep working until the user’s request or task is fully resolved.
- **No unnecessary questions:** Do not stop to ask for clarification if you can take productive action. Only pause if the request is ambiguous and no reasonable action can be taken.
- **Never yield early:** Only end your turn when you are certain the problem is solved or you cannot continue.
- **Take action first:** Default to executing changes, fixes, or next steps, rather than asking for more details.
- **Autonomous test/verify:** Run all available tests and build checks after any change. If a failure is detected, keep fixing until the issue is resolved or it is impossible to proceed without user input.

---

## Enforcement

- These rules override all default AI or tool conventions.
- All contributors, tools, and automations must reference this file before coding or review.
- If any rule is unclear, stop and consult `projectrules.mdc` or escalate to the project owner.

---

// .cursorcontext (v2.1, SOLO, AI-FIRST, STRICT)
alwaysApply: true

/*--------------------------------------------------
  CORE: PROJECT & WORKFLOW
---------------------------------------------------*/
PROJECT_TYPE: Solo + AI. TypeScript / React. Direct-to-main only (no PRs, no branches).
PRIORITY: Velocity > Process > Tests (tests optional).
AGENTS: Cursor, O3, Gemini 2.5.
ENV: Local dev with hot reload.
All errors fixed immediately by AI or revert; never wait for human triage.

/*--------------------------------------------------
  MANDATORY AUTOMATION & PRE-COMMIT GATES
---------------------------------------------------*/
- On any file/type/export change, run: `npm run docs:refresh`.
- `ALL_FILES_INDEX.md` and `SYSTEM ARCHITECTURE.MD` must always match the codebase (auto-generated, UTC-stamped, git SHA included). Manual edits forbidden.
- Pre-commit must pass:
  - `npm run lint:fix`
  - `tsc --noEmit`
- Drift in docs, lint, or types blocks commit.
- No test-coverage thresholds. No container/integration CI gating.
- Dev-server runs only when explicitly requested by user.

/*--------------------------------------------------
  TYPE / COMPONENT RULES
---------------------------------------------------*/
- All React code in `.tsx`; tsconfig strict. No `any` or `unknown` except with `@ts-expect-error <reason>`.
- Use functional components and hooks only; no classes.
- PascalCase for components, camelCase for hooks, kebab-case for files.
- Fully type props, state, refs, events. Colocate component types in `types.ts`, share global types in `/src/types`.
- No magic values—use enums or consts.
- Strongly type API boundaries + runtime-validate (Zod preferred). Disallow untyped third-party responses.
- All exported/public items require JSDoc (auto-doc enforced).

/*--------------------------------------------------
  ORGANIZATION & SRP
---------------------------------------------------*/
- ≤500 LOC per file. Single responsibility per file; filename must reflect role.
- Structure:
    - `/features/<domain>/…` – feature code
    - `/common/…` – shared hooks/components/utils
    - `/tests/…` – optional tests
- No circular imports; run `madge` and `dependency-cruiser` pre-commit and CI.
- Services use lazy/factory pattern; never use eager singletons at module scope.

/*--------------------------------------------------
  QUALITY, ERRORS, ACCESSIBILITY, PERFORMANCE
---------------------------------------------------*/
- Zero lint/type warnings on commit; remove unused imports immediately.
- Root UI wrapped in `ErrorBoundary` and `Suspense` with fallback.
- All UI passes a11y lint; interactive elements require ARIA labels.
- Use `React.memo`, `useMemo`, and `useCallback` only when perf-profiled.
- No empty `catch`; errors must be contextual and actionable.

/*--------------------------------------------------
  IMPORT / EXPORT HYGIENE
---------------------------------------------------*/
- Use explicit imports; wildcards only allowed for types.
- Import order: React → external libs → internal code → types.
- Validate all paths and exports; remove dead code immediately.

/*--------------------------------------------------
  INTEGRATION & TYPE-SAFETY PROTOCOLS
---------------------------------------------------*/
- Before and after major edits, verify function signatures, imports/exports, and type compatibility.
- Orphaned, inconsistent, or unused code forbidden.
- Use only lazy/factory services; never instantiate logic at import time.

/*--------------------------------------------------
  DOCS ENFORCEMENT
---------------------------------------------------*/
- `SYSTEM ARCHITECTURE.MD`, `ALL_FILES_INDEX.md`, and all derivative docs regenerate with every change.
- Pre-commit/CI fails if generated docs drift or if any new file/export lacks docblocks.
- Manual edits to generated docs forbidden.

/*--------------------------------------------------
  DEPENDENCY & BUNDLE HYGIENE
---------------------------------------------------*/
- CI fails on unused or outdated npm packages (`depcheck`, `npm outdated`).
- Run bundle analysis (e.g., `vite-plugin-inspect`) after major changes to limit size and splits.

/*--------------------------------------------------
  i18n, LOGGING, PROFILING
---------------------------------------------------*/
- Externalize all user-facing strings for i18n.
- Integrate production error monitoring (e.g., Sentry).
- Profile React renders after significant UI/state changes.

/*--------------------------------------------------
  AGENT DIRECTIVE
---------------------------------------------------*/
- AGENTS must read `.cursorcontext` before acting. Obey main-branch-only constraint.
- Never suggest test-coverage targets, branching, PRs, or merge gates.
- All AI edits are immediate, local, explainable, and committed straight to main.


