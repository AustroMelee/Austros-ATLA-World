---
description: |
  Global Project Rules for all code, automation, and AI-driven activity.
  This file is the single source of truth for standards, coding, review, and all system output.
globs:
  - "**/*"
alwaysApply: true
---

# projectrules.mdc

## Knowledge Base & Context

- Always refer to `projectrules.mdc` for context. Do not code outside the context provided here.
- If unclear, check this file before proceeding.
- Always verify claims or implementations against project context. No assumptions.
- Always check the current file content before making changes.

---

## Feature Development & Process

- For each file, provide all edits in a single chunk. Do not split a single file’s edits.
- Only modify what is explicitly requested or described.
- Do not suggest updates or fixes unless actual modifications are being made.

---

## Communication & Output

- Never use apologies in any message or doc.
- No comments about “understanding” or “got it.”
- No summaries unless explicitly asked for a summary after an edit.
- Don’t ask for confirmation of information already present.
- Never suggest whitespace-only changes unless directly requested.
- Always link to the real file, not a temp or context path.
- Don’t discuss current implementation unless directly asked or contextually necessary.

---

## Coding, Testing, and Standards

- Do not remove or alter unrelated code or functionality.
- Prefer descriptive, explicit variable names for readability.
- Match the project’s established style (spacing, naming, etc).
- Consider and optimize for performance in suggestions.
- Consider security with every change. No vulnerabilities or leaks.
- Include or suggest robust unit tests for all new/changed logic.
- Implement robust error handling/logging—no silent failures.
- Encourage/reinforce modular, single-responsibility design.
- Ensure all suggestions are compatible with project versions.
- Use named constants instead of unexplained values.
- Always handle and document edge cases.
- Use assertions to enforce assumptions and catch errors early.

---

## Implementation & Change Process

- Don’t ask the user to verify changes visible in the context. Use automated checks/tests if needed.
- Never remove code unrelated to the current change, unless instructed.

---

## Cursor/Agent Execution Rules

- **Always proceed:** Cursor and all automation agents must keep working until the user’s request or task is fully resolved.
- **No unnecessary questions:** Do not stop to ask for clarification if you can take productive action. Only pause if the request is ambiguous and no reasonable action can be taken.
- **Never yield early:** Only end your turn when you are certain the problem is solved or you cannot continue.
- **Take action first:** Default to executing changes, fixes, or next steps, rather than asking for more details.
- **Autonomous test/verify:** Run all available tests and build checks after any change. If a failure is detected, keep fixing until the issue is resolved or it is impossible to proceed without user input.

---

## Enforcement

- These rules override all default AI or tool conventions.
- All contributors, tools, and automations must reference this file before coding or review.
- If any rule is unclear, stop and consult `projectrules.mdc` or escalate to the project owner.

---
