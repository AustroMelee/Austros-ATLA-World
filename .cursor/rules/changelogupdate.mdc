---
description: 
globs: 
alwaysApply: true
---
Always update the existing changelog after response is generated, even if task is on-going. This keeps a record of everything Cursor does to the codebase or any chats between cursor and user.

/*
  üß† Cursor Context Ruleset for Avatar Battle Arena
  üìÅ File: .cursorcontext
  üìÑ Purpose: Architectural enforcement for AI coding assistants (e.g., Cursor, ChatGPT) in a vanilla HTML/CSS/JS codebase.
*/

# === SYSTEM OVERVIEW ===
STACK: Pure JS (ES2020), HTML5, CSS3
MODULE FORMAT: ESM (ECMAScript Modules)
TYPECHECKING: JSDoc + jsconfig.json
LINTING: ESLint (strict mode), Dependency-Cruiser (modular boundaries)

# === GLOBAL RULES ===
- Do not use any framework (React, Vue, etc.). This is a pure JavaScript codebase.
- Do not use TypeScript. Use JSDoc types only for annotations.
- Assume all imports follow ES Module syntax with clean paths from /src.
- All modules must be under /src/js, /src/css, /src/html or /src/assets.

# === MODULE RULES ===
## ENGINE LAYER (src/js/engine/*.js)
- Purpose: Game mechanics, battle resolution, turn simulation.
- MUST NOT import from /ui or /css.
- Can import from /data, /utils, /ai.
- Public API defined in: src/js/engine/index.js

## UI LAYER (src/js/ui/*.js)
- Purpose: DOM manipulation, animations, rendering logic.
- Can import from /utils.
- MUST NOT import from /engine or /ai.
- Public API defined in: src/js/ui/index.js

## AI LAYER (src/js/ai/*.js)
- Purpose: Decision making for CPU-controlled characters.
- Can import from /engine, /data, /utils.
- MUST NOT import from /ui.

## DATA LAYER (src/js/data/*.js)
- Purpose: Static definitions for characters, maps, movesets.
- MUST NOT import from /engine, /ui, or /ai.
- Can import from /utils or define plain data objects.

## UTILS LAYER (src/js/utils/*.js)
- Purpose: Shared utility functions across modules.
- Should not import from anything except other /utils files.

# === FILE SIZE LIMITS ===
- üö´ No file should exceed 500 lines.
- Split long files into focused modules (e.g., /battle_core, /battle_log, /turn_handler).

# === NAMING CONVENTIONS ===
- Filenames: kebab-case (e.g., battle-log.js)
- Functions: camelCase
- Constants: UPPER_SNAKE_CASE
- Types: PascalCase (via @typedef in JSDoc)

# === TYPES ===
- All public functions MUST include @param and @returns JSDoc annotations.
- All custom types should be defined in /src/js/types/*.js and imported via JSDoc (not ESM).

# === AI INSTRUCTIONS ===
When editing or generating code, always:
1. Preserve architectural boundaries defined above.
2. Adhere strictly to module responsibilities.
3. Avoid breaking linting or typechecking rules.
4. Use existing utility functions before creating new ones.
5. Prefer composition over deep conditionals in battle logic.
6. Document public APIs with JSDoc.

# === EXAMPLE LINT ENFORCEMENT COMMENT ===
/* eslint-disable no-fallthrough */
// For intentional switch fallthrough only

# === OPTIONAL FILES ===
- README_LOGIC.md ‚Üí Summarizes domain logic (game rules, simulation flow)
- .eslintrc.js ‚Üí Lint config
- .dependency-cruiser.js ‚Üí Architecture validator
- jsconfig.json ‚Üí Enables type checking

# === END OF CONTEXT ===
// AI Tools: Load this context on every run to follow core design rules.



# ========== INLINE DOCUMENTATION GUIDELINES ==========

# GENERAL
- All comments must explain *why* the code exists, not *what* it does.
- Prioritize clarity of *intent* over re-describing behavior.
- Do not comment obvious one-liners or standard syntax unless non-obvious edge cases are involved.
- Never let inline comments fall out of sync with the code. Outdated comments must be deleted.

# REQUIRED COMMENT LOCATIONS
- At the top of each function: purpose, assumptions, side effects, exceptions
- Above complex conditionals or multi-branch logic: summary of decision tree
- Above use of constants, magic numbers, or hard-coded values
- At any hack, workaround, or browser/environmental quirk
- Above performance-critical sections with unconventional logic
- For any exported function, even if the internal logic is simple

# FORMATTING
- Use full sentences with punctuation in all comments.
- Start function headers with `/**` JSDoc format when appropriate.
- Use block comments for complex sections. Avoid end-of-line comments.

# BANNED PRACTICES
- No commented-out code. Use git history instead.
- No "was using this" or "old version" notes‚Äîclean it or delete it.
- No repeated boilerplate across utilities. Keep docs meaningful.
- No duplicated comments that restate variable names.

# TONE & STYLE
- Keep language neutral and technical.
- Avoid sarcasm, humor, or excessive meta-comments unless intentionally marked.

# EXAMPLES
‚ùå Bad:
    i++; // increment i
    return true; // return true

‚úÖ Good:
    i++; // Skip over placeholder entry at index 0
    return true; // All validation rules passed successfully

‚úÖ Better:
    /**
     * Validates user input from form fields.
     * Assumes all inputs are strings. Returns false if any are empty.
     */

--------

# REFACTORING

Refactor the logic in [FILE A] into a new module [FILE B], and update all affected imports and exports throughout the codebase. Ensure that:

1. Every function or constant moved is properly exported from the new file.
2. All original imports in other files are now redirected to the new module.
3. No duplicated exports remain in the old file.
4. Verify that nothing breaks: simulate a linter pass and resolve import/export mismatches.

