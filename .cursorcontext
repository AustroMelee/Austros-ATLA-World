// .cursorcontext (v1.1, Last updated: 2025-07-03)

/**
 * SOLO DEVELOPER FRONTEND: TypeScript + React Maximum Strictness & AI Autonomy
 * Purpose: Instruct Cursor to generate, maintain, and refactor a bulletproof codebase—zero technical debt, maximum reliability, and rapid solo development.
 */

/*==========================================
=            CORE PRINCIPLES               =
==========================================*/

/**
 * 1.
 1b) YOU ARE FORBIDDEN FROM STARTING NEW DEV SERVERS/PORTS UNLESS ASKED.
 1c) YOU ARE FORBIDDEN FROM CREATING TEMP SCRIPTS/DEMOS UNLESS SPECIFICALLY ASKED.

  MUST use TypeScript for all React code. No `.js` or `.jsx` files allowed for logic/UI.
 * 2. MUST enable strictest settings in tsconfig.json:
 *    {
 *      "strict": true,
 *      "noImplicitAny": true,
 *      "strictNullChecks": true,
 *      "noFallthroughCasesInSwitch": true,
 *      "esModuleInterop": true,
 *      "jsx": "react-jsx"
 *    }
 * 3. MUST NOT use `any` or `unknown` except with `// @ts-expect-error` + justification.
 * 4. MUST use `.tsx` extension for all files containing JSX.
 * 5. SHOULD colocate all types in `types.ts` in each component folder. Shared types/interfaces in `/src/types`.
 * 6. MUST prefer functional components and hooks; no class components.
 * 7. MUST NOT use magic strings/numbers—prefer `enum`, `const`, or discriminated unions in `/src/constants` or `/src/types/enums.ts`.
 * 8. MUST use PascalCase for component/type names, camelCase for hooks/utilities, kebab-case for files.
 */

/*==========================================
=          COMPONENT GUIDELINES            =
==========================================*/

/**
 * 9. MUST fully type all component props, state, refs, and event handlers.
 * 10. MUST use `React.FC<Props>` or `({ prop }: Props) => JSX.Element` for components.
 * 11. MUST declare `children: React.ReactNode` if component renders children.
 * 12. MUST use named interfaces/type aliases for complex props.
 * 13. MUST type all DOM event handlers, e.g.:
 *      const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => { ... }
 * 14. MUST colocate reusable types in `types.ts`.
 * 15. MUST use JSDoc for all exported/public components and utilities.
 */

/*==========================================
=            HOOKS & STATE                 =
==========================================*/

/**
 * 16. All custom hooks MUST:
 *     - Start with `use` prefix
 *     - Have explicitly typed parameter and return values.
 *     - Example: function useUserData(userId: string): { loading: boolean; user: User | null } { ... }
 * 17. MUST explicitly type `useState`, `useReducer`:
 *      const [value, setValue] = useState<ValueType>(initial)
 * 18. MUST always declare all dependencies in `useEffect` and `useCallback`.
 * 19. Cursor MUST enable or auto-insert `eslint-plugin-react-hooks` for exhaustive-deps enforcement.
 * 20. All global/shared state (Context, Zustand, etc.) MUST be typed with interfaces in `/src/types/state.ts`.
 */

/*==========================================
=               API & DATA                 =
==========================================*/

/**
 * 21. MUST strongly type all API boundaries (fetch, axios, react-query, etc).
 *     - DO NOT assume response shapes—cast and/or validate.
 *     - Prefer Zod for runtime schema validation.
 *     - Example:
 *         const userSchema = z.object({ id: z.string(), name: z.string() });
 *         const user: User = userSchema.parse(await res.json());
 * 22. MUST type all form models, e.g.:
 *      type LoginForm = { email: string; password: string };
 * 23. MUST NOT use untyped third-party library responses.
 */

/*==========================================
=           FILE ORGANIZATION              =
==========================================*/

/**
 * 24. Each component folder SHOULD follow this structure:
 *   /component-name
 *      index.ts
 *      component-name.tsx
 *      types.ts
 *      styles.module.css
 *      component-name.test.tsx
 * 25. Shared folders:
 *      /src/types      // interfaces, enums, unions
 *      /src/utils      // generic functions
 *      /src/hooks      // shared custom hooks
 *      /src/constants  // design tokens, enums, config
 * 26. MUST NOT export reusable types inline from component files—extract to types.ts.
 */

/*==========================================
=        EVENTS, REFS, FORMS, ERRORS       =
==========================================*/

/**
 * 27. MUST type all event handlers and on* props using React types.
 * 28. MUST always specify a type for `useRef`, e.g.:
 *      const inputRef = useRef<HTMLInputElement>(null)
 * 29. All root-level UI trees MUST wrap in error boundaries and provide Suspense fallback types.
 *      Prefer `react-error-boundary`:
 *      <ErrorBoundary fallback={<ErrorFallback />}>
 *        <Suspense fallback={<LoadingSpinner />}>
 *          <App />
 *        </Suspense>
 *      </ErrorBoundary>
 * 30. All UI components MUST pass accessibility linting (axe, eslint-plugin-jsx-a11y) and include ARIA labels for interactive elements.
 */

/*==========================================
=             PERFORMANCE                  =
==========================================*/

/**
 * 31. Cursor SHOULD suggest:
 *      - useMemo for expensive calculations in render
 *      - useCallback when passing stable function refs as props
 *      - React.memo for pure stateless components
 *      - splitting any component >200 LOC into smaller files
 *      - Avoiding over-memoization for trivial values
 */

/*==========================================
=                TESTING                   =
==========================================*/

/**
 * 32. All new components/hooks MUST have matching test files using @testing-library/react and @testing-library/jest-dom.
 * 33. All tests MUST import type definitions from component types, not duplicate type logic.
 * 34. Tests MUST mock API/network calls with typed utilities (e.g., msw or jest.mock).
 * 35. Solo projects MUST target at least 80% coverage for exported functions/components.
 */

/*==========================================
=             AI AUTONOMY & CI             =
==========================================*/

/**
 * 36. Cursor MUST auto-fix: missing types, untyped event handlers, untested components, missing Suspense/error boundaries, or missing ARIA labels when generating or refactoring code.
 * 37. When encountering legacy JavaScript or untyped code, Cursor MUST generate a migration plan and suggest incremental typing steps (e.g., start with prop types, state, then API boundaries).
 * 38. Code MUST NOT be marked ready/complete unless all type, lint, and test checks pass.
 * 39. All code MUST pass ESLint and Prettier checks (standard or project config).
 * 40. Cursor MUST prefer type-safe, self-documenting code—even if initial typing feels verbose.
 */

/*==========================================
=         PARAMETER & IMPORT RULES         =
==========================================*/

/**
 * 41. MUST prefix unused parameters with underscore (_state, _props) to indicate intentional non-use.
 * 42. MUST remove unused imports immediately - never leave commented-out imports.
 * 43. MUST validate all function signatures match their type definitions exactly.
 * 44. MUST NOT declare parameters that are never used - prefer optional parameters or function overloading.
 * 45. When implementing interface functions, MUST use all required parameters or explicitly mark as unused.
 */

/*==========================================
=        TYPE SAFETY VALIDATION            =
==========================================*/

/**
 * 46. MUST run `npx tsc --noEmit` before any commit to catch type mismatches.
 * 47. MUST validate example files use complete type definitions matching production interfaces.
 * 48. MUST ensure all exported types are actually used or explicitly marked as unused.
 * 49. MUST verify type compatibility between related interfaces (e.g., Character vs BattleCharacter).
 * 50. MUST use exact type matching - no structural typing unless explicitly intended.
 */

/*==========================================
=        ERROR HANDLING & SUSPENSE         =
==========================================*/

/**
 * 51. MUST wrap all root-level components in ErrorBoundary and Suspense.
 * 52. MUST separate error boundary components into dedicated files (not inline in main.tsx).
 * 53. MUST provide meaningful fallback components with proper accessibility attributes.
 * 54. MUST handle both synchronous and asynchronous errors appropriately.
 * 55. MUST test error boundaries with intentional error conditions.
 */

/*==========================================
=         AI & RULE SYSTEM RULES           =
==========================================*/

/**
 * 56. MUST ensure all AI rule functions use their declared parameters or mark as unused.
 * 57. MUST validate weight functions conform to WeightFunction type signature exactly.
 * 58. MUST ensure rule conditions and actions have matching parameter counts.
 * 59. MUST use consistent parameter naming across all rule implementations.
 * 60. MUST validate that example AI behavior matches actual implementation types.
 */

/*==========================================
=        PRE-COMMIT VALIDATION             =
==========================================*/

/**
 * 61. MUST run complete validation before marking work as complete:
 *     - npm run lint (zero warnings)
 *     - npx tsc --noEmit (zero errors)
 *     - npm run build (successful compilation)
 *     - All type imports resolve correctly
 * 62. MUST verify no circular dependencies exist.
 * 63. MUST ensure all exported types are properly documented.
 * 64. MUST validate that example files compile without type errors.
 * 65. MUST confirm error boundaries are properly implemented.
 */

/*==========================================
=         IMPORT/EXPORT HYGIENE            =
==========================================*/

/**
 * 66. MUST use explicit imports - no wildcard imports except for types.
 * 67. MUST validate that all imported types are actually used in the file.
 * 68. MUST ensure import paths are correct and files exist.
 * 69. MUST use consistent import ordering (React, external libs, internal modules, types).
 * 70. MUST remove unused imports immediately when refactoring.
 */

/*==========================================
=         EXAMPLE FILE STANDARDS            =
==========================================*/

/**
 * 71. MUST ensure example files use complete type definitions matching production interfaces.
 * 72. MUST validate that example objects have all required properties.
 * 73. MUST test example files compile without type errors.
 * 74. MUST use realistic but minimal data in examples.
 * 75. MUST document any intentional simplifications in example files.
 */

/*==========================================
=        AUTOMATIC FIX PROTOCOLS           =
==========================================*/

/**
 * 76. When encountering unused parameter warnings, MUST fix by:
 *     - Adding underscore prefix for intentionally unused parameters
 *     - Removing parameters if truly unnecessary
 *     - Updating type definitions if signatures are wrong
 * 77. When encountering type mismatches, MUST:
 *     - Identify the root cause (missing properties, wrong types)
 *     - Fix the type definition or the implementation
 *     - Validate the fix resolves all related errors
 * 78. MUST never leave type errors or warnings unresolved.
 */

/*==========================================
=      DEVELOPMENT ENVIRONMENT             =
==========================================*/

/**
 * 79. MUST ensure development server runs without warnings.
 * 80. MUST validate that fast-refresh works correctly.
 * 81. MUST confirm that error boundaries don't interfere with development workflow.
 * 82. MUST ensure all TypeScript strict settings are enabled and enforced.
 * 83. MUST validate that ESLint configuration catches all intended issues.
 */

/*==========================================
=         CODE QUALITY GATES               =
==========================================*/

/**
 * 84. MUST achieve zero warnings before considering work complete.
 * 85. MUST validate that all type definitions are actually used.
 * 86. MUST ensure no dead code or unused exports exist.
 * 87. MUST confirm that all error handling paths are properly typed.
 * 88. MUST validate that all async operations have proper error boundaries.
 * 89. MUST ensure that all UI components have proper accessibility attributes.
 * 90. MUST confirm that all state management is properly typed.
 */

/*==========================================
=          EXAMPLES OF GOOD CODE           =
==========================================*/

// ✅ Fully typed Button component
type ButtonProps = {
  label: string;
  onClick?: () => void;
  disabled?: boolean;
};
const Button: React.FC<ButtonProps> = ({ label, onClick, disabled }) => (
  <button onClick={onClick} disabled={disabled}>{label}</button>
);

// ✅ Custom hook with typed input/output
function useUser(userId: string): { loading: boolean; user: User | null } { /* ... */ }

// ✅ API fetch with runtime validation
const userSchema = z.object({ id: z.string(), name: z.string() });
const user: User = userSchema.parse(await res.json());

// ✅ useRef with explicit type
const inputRef = useRef<HTMLInputElement>(null);

// ✅ Test importing types and mocking fetch
import type { ButtonProps } from './types';
// ... test logic ...

/*
  Adhering to this context ensures:
    - Cursor can generate, refactor, and migrate code autonomously and safely.
    - Your solo codebase remains bug-resistant, accessible, and future-proof.
    - Maintenance and iteration are frictionless, even months or years later.
*/


AI-Agentic Cursor & SRP Guide

1. AI-Agentic Cursor Context

A codebase optimized for LLMs, with strict separation of concerns, zero-conflict architecture, and autonomous self-healing logic.

1A. Environment

Shell: powershell.exe on Win32 (Windows path style)

normalizePaths: true

1B. Proactive Autonomy

Self-Diagnose & Fix: On any error or misconfiguration, Cursor must:

Detect root cause

Apply the fix automatically

Explain the change and its intent

Re-run linters, type-checkers, and tests to validate fix

Iterate until resolved or externally blocked

No User Delegation: Never ask the user to troubleshoot.

1C. General Principles

Scan First: Always read relevant code before asking questions.

Code for AI: Prioritize clarity, redundancy, and explicit structure.

No Dev Server: Never run unless explicitly requested.

1D. File Structure Rules

Max File Size: ≤500 lines or 6K characters

One Responsibility: Each file implements a single domain concept.

Domain Folders Only: Organize by feature/domain (e.g., features/auth/components/LoginForm.tsx) not flat categories.

1E. TypeScript Practices

Use type over interface unless extending libraries.

Name all types explicitly and uniquely (e.g., ButtonProps, TalentNode).

Keep types simple—avoid deeply nested generics.

Never redefine or shadow type names.

1F. Function Design

Use VerbNoun names (e.g., loadUser, fetchReport).

Max 3–4 parameters: prefer object destructuring.

Explicit return types with named shapes.

Pure by default. Side effects require clear names (e.g., logAndSend).

1G. Naming & Semantics

No single-letter variables or vague names.

Extract magic values into named constants.

1H. Comments & Docblocks

All exports must have doc comments.

Annotate complex logic with intent-driven inline comments.

1I. Modules & Dependency Rules

No Circular Imports.

Explicit Imports Only: No star or side-effect imports.

Layering Rule: High-level modules may not import from lower-level ones.

Use Dependency Cruiser to verify module boundaries.

1J. Error Handling

No empty catch blocks.

All errors must be contextual and actionable.

1K. LLM Editability Guarantees

Break complex logic into named subfunctions.

Tag unstable code with // FIXME: or // TEMP:.

Never hide logic in nested closures.

1L. Main Contextual Pillars (MCPs) & Context7 Limits

Limit to 7 logical domains per session.

Use inline tags: // CONTEXT: Auth, // FOCUS: TokenValidation

1M. Sequential Prompt Flow

@plan → outline steps

@explain → describe behavior

@rewrite → apply refactor

2. Single Responsibility Principle (SRP)

Each file/module must have one reason to change.

2A. Core Module Types

features/ – feature modules (auth, user-profile, etc.)

common/ – shared hooks/components/utils

tests/ – all unit/integration tests

2B. Folder Structure Example

src/
├── features/
│   ├── authentication/
│   │   ├── prompts/
│   │   ├── validation/
│   │   ├── services.ts
│   │   ├── controller.ts
│   │   └── components/
│   │       ├── LoginForm.tsx
│   │       └── LoginForm.module.css
│   └── user-profile/
├── common/
│   ├── components/
│   └── hooks/
└── tests/

2C. SRP Checklist

One-sentence responsibility

No unrelated imports

File name matches role

Testable with mocks/stubs

2D. Refactor Rules

Preserve existing behavior

Extract, don't reinvent

Small, atomic commits

Separate feature, fix, and refactor changes

3. Operational Practices

3.1 Prompt Versioning

Metadata tags: version, author, summary

Maintain changelogs alongside templates

3.2 Metrics & Cost Tracking

Log token usage, latency, and errors

Add cost alerts/dashboards

3.3 Security & Privacy

Redact PII in all inputs/outputs

Run sanitizer before every LLM call

Ban unsafe or unmaintained SDKs

3.4 CI/CD

Lint & format prompts

Stub LLM calls for contract testing

Full pipeline from prompt → UI

3.5 Collaboration

All prompt/parser changes via PR with peer review

Use docs(prompt): commit style

3.6 Observability

Centralize model errors & logs

Track parse error rates & latencies

3.7 Testing

Golden-prompt integration tests

JSON Schema validation for parsed outputs

4. UI, CSS, and Conflict Prevention

4.1 Style Application Conflicts

Never reuse class names across modules

Use CSS Modules only

All classes must be locally scoped and imported as named bindings

Avoid generic classes like .tooltip; use .talent-tooltip

Confirm CSS variable availability at build time

4.2 Load Order & Source Conflicts

If using HTML <link> tags without a bundler:

<link rel="stylesheet" href="/styles/variables.css">
<link rel="stylesheet" href="/styles/grid.css">
<link rel="stylesheet" href="/styles/nodes.css">
<link rel="stylesheet" href="/styles/tooltip.css">

Otherwise, prefer JS-based import statements handled by bundlers (Vite, Webpack)

Never mix <link> and import styles in the same project unless explicitly separated

4.3 Visual Pathfinding (for Connectors)

All visual edge logic must use real graph data, even if progression filters apply elsewhere

Don't exclude nodes from visual traversals unless connections are direct

Validate all connector renders after progression rule changes

4.4 CSS Debugging Practices

Match class names to component names exactly

Use DevTools to inspect active rules and specificity

Centralize all colors/spacings in variables.css

Use stylelint in CI to catch typos, duplicates

4.5 Overflow & Scrolling (Critical)

Never apply overflow: hidden to a parent of a scrollable UI

Use overflow-x: auto

Audit overflow clipping when horizontal scroll breaks

5. Feature Integration Protocol (Cursor-Specific)

5.1 Cursor Must:

Log all modified files

Detect type, style, and dependency conflicts before writing

Never modify >3 files per request unless explicitly authorized

5.2 When implementing external LLM snippets:

Translate snippet to existing folder structure

Refactor imports, types, and styles to avoid shadowing

Stop and warn if any rule above is in conflict

5.3 Dependency Checks (Mandatory)

All CSS variable usages must resolve

All TypeScript type names must be globally unique

All public types/interfaces must be colocated or namespaced

Use Dependency Cruiser for every major change

This Cursor context governs all behavior across the AI-assisted workflow. Any violation, conflict, or ambiguity must trigger a halt and explain sequence. Cursor is expected to act with architectural awareness and full policy compliance at all times.

4.6 Visual Collision & Layout Integrity (Critical)

All visually adjacent elements (cards, containers, panels, etc.) must be guaranteed to never overlap—including all visual effects (box-shadow, glow, outline, blur, or animated effect)—at all viewport sizes and breakpoints.

Cursor must:

Detect and prevent all card or container overlaps, including any visual effect extending outside the element's bounding box.

Enforce a minimum gap or margin between elements equal to the maximum visual bleed radius.

Apply and test these rules across all layout modes (flex, grid, float).

Audit layouts at desktop, tablet, and mobile breakpoints and halt/alert on any overlap or bleed.

4.7 Responsive Layout & Regression Verification

For any layout-affecting UI change, Cursor must:

Generate and compare snapshots or computed box models at multiple breakpoints.

Halt and flag on any visual overlap or collision.

Ensure that all containers use explicit gap or padding values, never relying on default spacing.

/*==========================================
=        INTEGRATION & SIGNATURE VALIDATION =
==========================================*/

/**
 * 91. Function Signature Validation (CRITICAL)
 * MUST validate all function signatures before implementation:
 *     - Check actual function definition, not assumed signature
 *     - Verify parameter count and types match exactly
 *     - Test function calls with actual parameters
 *     - Never assume function signatures from usage patterns
 * 
 * 92. Cross-Module Integration Testing
 * MUST test integration points between modules:
 *     - Validate imports/exports work correctly
 *     - Test function calls between different modules
 *     - Verify type compatibility across module boundaries
 *     - Check for circular dependencies
 * 
 * 93. Service Creation Pattern Validation
 * MUST validate service creation patterns:
 *     - Check if service factories take parameters or not
 *     - Verify service instantiation matches factory signature
 *     - Test service methods with actual parameters
 *     - Ensure service state is properly initialized
 * 
 * 94. Architecture Consistency Enforcement
 * MUST maintain consistency across architectural changes:
 *     - Update all related components when changing interfaces
 *     - Verify all call sites match new function signatures
 *     - Test integration points after architectural changes
 *     - Ensure no orphaned or inconsistent implementations
 * 
 * 95. Rapid Development Safety Protocols
 * MUST implement safety checks during rapid development:
 *     - Validate function signatures before each implementation
 *     - Test integration points after each major change
 *     - Clean up unused code immediately, not later
 *     - Verify type safety across all modified files
 * 
 * 96. Function Call Validation Protocol
 * MUST validate all function calls:
 *     - Check parameter count matches function signature
 *     - Verify parameter types are compatible
 *     - Test function calls with actual data
 *     - Never assume function behavior from usage patterns
 * 
 * 97. Service Integration Testing Protocol
 * MUST test service integrations:
 *     - Validate service creation and initialization
 *     - Test service method calls with real parameters
 *     - Verify service state management
 *     - Check for proper error handling
 * 
 * 98. Type Safety Validation Protocol
 * MUST ensure type safety across all changes:
 *     - Run TypeScript checks after each modification
 *     - Validate all type imports and exports
 *     - Check for type compatibility issues
 *     - Ensure no type mismatches exist
 * 
 * 99. Cleanup and Maintenance Protocols
 * MUST maintain clean codebase:
 *     - Remove unused imports immediately
 *     - Clean up unused variables and parameters
 *     - Remove dead code and unused exports
 *     - Maintain consistent naming conventions
 * 
 * 100. Integration Testing Requirements
 * MUST perform integration testing:
 *     - Test all module interactions
 *     - Validate data flow between components
 *     - Check for proper error handling
 *     - Verify performance characteristics
 */

/*==========================================
=        ERROR PREVENTION PROTOCOLS        =
==========================================*/

/**
 * 101. Function Signature Mismatch Prevention
 * MUST prevent function signature mismatches:
 *     - Always read function definitions before calling
 *     - Validate parameter types and counts
 *     - Test function calls with actual data
 *     - Never assume function signatures
 * 
 * 102. Unused Code Prevention
 * MUST prevent unused code accumulation:
 *     - Remove unused imports immediately
 *     - Clean up unused variables and parameters
 *     - Remove dead code during refactoring
 *     - Maintain clean, minimal codebase
 * 
 * 103. Import/Export Consistency
 * MUST maintain import/export consistency:
 *     - Validate all import paths exist
 *     - Check for circular dependencies
 *     - Ensure proper export/import matching
 *     - Test module loading and resolution
 * 
 * 104. Type Safety Enforcement
 * MUST enforce type safety:
 *     - Run TypeScript checks frequently
 *     - Validate all type definitions
 *     - Check for type compatibility
 *     - Ensure no type errors exist
 * 
 * 105. Integration Point Validation
 * MUST validate integration points:
 *     - Test all module interactions
 *     - Validate data flow between components
 *     - Check for proper error handling
 *     - Verify performance characteristics
 */

/*==========================================
=        DEVELOPMENT WORKFLOW ENFORCEMENT  =
==========================================*/

/**
 * 106. Pre-Implementation Validation
 * MUST validate before implementation:
 *     - Read all related function signatures
 *     - Check existing type definitions
 *     - Validate import/export patterns
 *     - Test integration points
 * 
 * 107. Post-Implementation Testing
 * MUST test after implementation:
 *     - Run TypeScript type checking
 *     - Test all function calls
 *     - Validate integration points
 *     - Check for unused code
 * 
 * 108. Refactoring Safety Protocols
 * MUST ensure safe refactoring:
 *     - Update all related components
 *     - Test all integration points
 *     - Validate type safety
 *     - Clean up unused code
 * 
 * 109. Architecture Evolution Safety
 * MUST ensure safe architecture evolution:
 *     - Update all related components
 *     - Test all integration points
 *     - Validate type safety
 *     - Maintain consistency
 * 
 * 110. Code Quality Gates
 * MUST enforce code quality gates:
 *     - Zero TypeScript errors
 *     - Zero unused imports/variables
 *     - All integration points tested
 *     - All function signatures validated
 */

/*==========================================
=        TYPE SYSTEM EVOLUTION PREVENTION  =
==========================================*/

/**
 * 111. Type Evolution Safety Protocols (CRITICAL)
 * MUST prevent type system evolution errors:
 *     - NEVER add required properties to existing types without migration plan
 *     - Use optional properties (?) for new features initially
 *     - Create type factories for complex object construction
 *     - Provide default values for all new required properties
 *     - Update all call sites when changing function signatures
 * 
 * 112. Type Factory Pattern Enforcement
 * MUST use type factories for complex object construction:
 *     - Create factory functions for BattleCharacter, PerceivedState, etc.
 *     - Never manually construct complex objects inline
 *     - Use factories to ensure all required properties are provided
 *     - Example: createBattleCharacter(character: Character): BattleCharacter
 * 
 * 113. Breaking Change Prevention
 * MUST prevent breaking changes in type definitions:
 *     - Use optional properties when adding new features
 *     - Create migration helpers for required property additions
 *     - Maintain backward compatibility for at least one version
 *     - Use union types for gradual feature rollouts
 * 
 * 114. Function Signature Stability
 * MUST maintain function signature stability:
 *     - Use optional parameters for new functionality
 *     - Provide default values for all parameters
 *     - Never change existing parameter types without migration
 *     - Use function overloading for multiple signatures
 * 
 * 115. Development Environment Guards
 * MUST set up development environment guards:
 *     - Run "npx tsc --noEmit" before any commit
 *     - Use pre-commit hooks for type checking
 *     - Set up CI/CD pipeline with type validation
 *     - Configure IDE to show type errors immediately
 * 
 * 116. Experimental Code Isolation
 * MUST isolate experimental code:
 *     - Use /sandbox/ folder for incomplete features
 *     - Mark experimental code with // TODO: EXPERIMENTAL
 *     - Don't import experimental code into production modules
 *     - Use feature flags for incomplete functionality
 * 
 * 117. Type Migration Patterns
 * MUST follow safe type migration patterns:
 *     - Phase 1: Add optional properties with defaults
 *     - Phase 2: Update all call sites to use new properties
 *     - Phase 3: Make properties required after full migration
 *     - Phase 4: Remove old properties and update types
 * 
 * 118. Code Organization for Type Safety
 * MUST organize code for type safety:
 *     - Keep related types in same file/module
 *     - Use barrel exports (index.ts) for type re-exports
 *     - Separate stable types from experimental types
 *     - Use namespacing for complex type hierarchies
 * 
 * 119. Proactive Type Validation
 * MUST validate types proactively:
 *     - Check type compatibility before implementation
 *     - Validate all object constructions match type definitions
 *     - Test type factories with various inputs
 *     - Ensure type definitions are self-documenting
 * 
 * 120. Legacy Code Type Migration
 * MUST migrate legacy code safely:
 *     - Start with prop types and state management
 *     - Gradually add type annotations to functions
 *     - Use type assertions only when absolutely necessary
 *     - Create migration scripts for large-scale changes
 */

/*==========================================
=        CIRCULAR DEPENDENCY PREVENTION     =
==========================================*/

/**
 * 121. Circular Dependency Detection (CRITICAL)
 * MUST detect and prevent circular dependencies:
 *     - Run "npx madge --circular src/" before any major changes
 *     - Use "npx dependency-cruiser --validate .dependency-cruiser.js" in CI
 *     - Monitor browser console for "The requested module does not provide an export" errors
 *     - Check for "Cannot access before initialization" errors in module loading
 * 
 * 122. Module Architecture Rules
 * MUST follow strict module architecture:
 *     - Services must be stateless or use lazy initialization
 *     - No eager singleton instantiation at module load time
 *     - Use factory functions instead of direct service exports
 *     - Implement dependency injection patterns for complex services
 * 
 * 123. Lazy Initialization Pattern (MANDATORY)
 * MUST use lazy initialization for all services:
 *     - Replace: export const service = new Service()
 *     - With: export const getService = () => service || (service = new Service())
 *     - Use dynamic imports for heavy dependencies: const module = await import('./heavy-module')
 *     - Implement singleton pattern with lazy instantiation
 * 
 * 124. Service Factory Pattern Enforcement
 * MUST use service factories instead of direct exports:
 *     - Create: export const createService = (config) => new Service(config)
 *     - Use: const service = createService(config) inside functions
 *     - Never export pre-instantiated services from module root
 *     - Pass dependencies as parameters to service constructors
 * 
 * 125. Import Chain Analysis
 * MUST analyze import chains before implementation:
 *     - Map all import dependencies before writing code
 *     - Identify potential circular paths (A → B → C → A)
 *     - Use dependency graphs to visualize module relationships
 *     - Break circular chains with lazy loading or dependency injection
 * 
 * 126. Battle System Architecture Rules
 * MUST follow specific rules for battle system modules:
 *     - Narrative services must use lazy initialization
 *     - Battle services must instantiate dependencies inside functions
 *     - AI services must not eagerly import battle state managers
 *     - Core engine must be the only module with eager initialization
 * 
 * 127. Emergency Circular Dependency Resolution
 * MUST resolve circular dependencies immediately:
 *     - Identify the circular chain using browser dev tools
 *     - Break the cycle by moving shared logic to a separate module
 *     - Use dynamic imports to defer module loading
 *     - Implement interface segregation to reduce coupling
 * 
 * 128. Module Loading Error Prevention
 * MUST prevent module loading errors:
 *     - Test all imports resolve correctly before committing
 *     - Use TypeScript's "noEmit" to catch import issues early
 *     - Validate that all exported symbols exist in source files
 *     - Check for typos in import/export statements
 * 
 * 129. Service State Management Rules
 * MUST manage service state safely:
 *     - Services should be stateless when possible
 *     - Use dependency injection for stateful services
 *     - Implement proper cleanup and disposal methods
 *     - Avoid global state that can cause initialization issues
 * 
 * 130. Development Server Port Management
 * MUST handle development server port conflicts:
 *     - Kill existing processes on ports 5173-5190 before starting dev server
 *     - Use "netstat -ano | findstr :5173" to identify blocking processes
 *     - Implement automatic port detection and switching
 *     - Document port usage in development setup
 */

/*==========================================
=        MODULE RESOLUTION PROTOCOLS       =
==========================================*/

/**
 * 131. Import Path Validation
 * MUST validate all import paths:
 *     - Use absolute paths for imports from different feature modules
 *     - Use relative paths for imports within the same module
 *     - Validate that all import targets exist and export the expected symbols
 *     - Use TypeScript's module resolution to catch path issues
 * 
 * 132. Export Symbol Validation
 * MUST validate all export symbols:
 *     - Ensure all exported symbols are actually defined in the module
 *     - Use named exports instead of default exports for better tree-shaking
 *     - Validate that re-exports maintain the original symbol names
 *     - Check for typos in export statements
 * 
 * 133. Dynamic Import Safety
 * MUST use dynamic imports safely:
 *     - Handle import failures with proper error boundaries
 *     - Use loading states for dynamically imported components
 *     - Validate that dynamic imports resolve to the expected modules
 *     - Implement fallback mechanisms for failed imports
 * 
 * 134. Module Initialization Order
 * MUST control module initialization order:
 *     - Core modules must initialize before feature modules
 *     - Use dependency injection to control initialization order
 *     - Avoid side effects during module loading
 *     - Implement proper cleanup for module disposal
 * 
 * 135. Cross-Module Communication
 * MUST use safe cross-module communication:
 *     - Use events or callbacks instead of direct imports for loose coupling
 *     - Implement interface contracts for module interactions
 *     - Use dependency injection for complex module relationships
 *     - Avoid direct state sharing between modules
 */

/*==========================================
=        DEVELOPMENT WORKFLOW ENFORCEMENT  =
==========================================*/

/**
 * 136. Pre-Development Validation
 * MUST validate before starting development:
 *     - Run circular dependency detection tools
 *     - Check for existing module loading errors
 *     - Validate current import/export structure
 *     - Ensure development environment is clean
 * 
 * 137. During Development Monitoring
 * MUST monitor during development:
 *     - Watch browser console for module loading errors
 *     - Run TypeScript checks after each file modification
 *     - Test module imports after adding new dependencies
 *     - Validate that all exports are properly defined
 * 
 * 138. Post-Development Validation
 * MUST validate after development:
 *     - Run complete circular dependency analysis
 *     - Test all module imports and exports
 *     - Validate that no unused imports remain
 *     - Ensure development server starts without errors
 * 
 * 139. Emergency Recovery Procedures
 * MUST have emergency recovery procedures:
 *     - Kill all development server processes
 *     - Clear browser cache and reload
 *     - Restart development server on a clean port
 *     - Validate that all modules load correctly
 * 
 * 140. Prevention Checklist
 * MUST follow prevention checklist:
 *     - No eager service instantiation at module level
 *     - Use lazy initialization for all services
 *     - Implement proper dependency injection
 *     - Validate all import/export statements
 *     - Test module loading after each change
 */

/*
  CRITICAL: NEVER TEST OR RUN DEVELOPMENT SERVERS
  MUST NEVER attempt to test, run dev servers, or claim to verify functionality
  unless explicitly requested by the user. I have no ability to actually test
  applications or see if they work properly.

  Adhering to this context ensures:
    - Cursor can generate, refactor, and migrate code autonomously and safely.
    - Your solo codebase remains bug-resistant, accessible, and future-proof.
    - Maintenance and iteration are frictionless, even months or years later.
    - Circular dependencies are prevented and resolved automatically.
    - Module loading errors are caught and fixed before they cause issues.
    - No false claims about testing or verification capabilities.
*/

/*==========================================
=      PRE-COMMIT HOOKS ENFORCEMENT        =
==========================================*/

/**
 * 141. Pre-commit hooks MUST be configured to run:
 *     - npx tsc --noEmit
 *     - npm run lint
 *   before any commit is accepted. Commits MUST be blocked if either command fails.
 *   Use Husky, lint-staged, or equivalent tools to enforce this in local and CI environments.
 *   All contributors MUST have these hooks enabled.
 */

/*==========================================
=   PROACTIVE EXPORT/RE-EXPORT CONFLICT PREVENTION   =
==========================================*/

/**
 * To prevent Vite/ESM 'Multiple exports with the same name' errors:
 *
 * 1. NEVER re-export and locally define a function, type, or variable with the same name in the same file.
 *    - Example: If you re-export `analyzeBattlePerformance` from another module, do NOT also define it locally in the same file.
 *    - If you need a local override, REMOVE the re-export.
 *    - If you only want to re-export, do NOT define it locally.
 *
 * 2. BEFORE adding a new export, always check for existing re-exports or local definitions in the file.
 *
 * 3. If you see a Vite/ESM error about 'Multiple exports with the same name', IMMEDIATELY remove the duplicate (either the re-export or the local definition).
 *
 * 4. This rule applies to all modules, but especially analytics.ts and any file that acts as a barrel or aggregation module.
 *
 * 5. Add this check to your pre-commit and code review process.
 */

// PROJECT DOCS AUTOMATION
// Run `npm run docs:refresh` to automatically update the Folder & File Overview in SYSTEM ARCHITECTURE.MD.
// This command scans all source files for @docs comments and regenerates the documentation table, ensuring zero drift between code and docs.
// Add @docs blocks to all critical files to keep the documentation living and accurate.

/*==========================================
=   🚨 How to Prevent Large-Scale Integration Errors   =
==========================================*/

/**
 * Enforce Pre-Commit Hooks
 * - Run `npx tsc --noEmit` and `npm run lint` as pre-commit and CI requirements. Block commits if either fails.
 *
 * Break Up Large Integrations
 * - Refactor and merge in smaller, testable chunks instead of one sweeping PR.
 *
 * Use Type-First Development
 * - Update types/interfaces before writing or merging logic or UI code.
 *
 * Automate Dead Code Cleanup
 * - Auto-prefix unused variables with `_` or clean them in CI to prevent TS6133 and lint noise.
 *
 * Document Expectations
 * - When upgrading core systems (like narrative), write developer changelogs and upgrade guides to set clear expectations for integration and testing.
 */

