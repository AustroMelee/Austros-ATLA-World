from pathlib import Path

cursor_rules_text = """
/*
  üß† Cursor Context Ruleset for Avatar Battle Arena
  üìÅ File: .cursorcontext
  üìÑ Purpose: Architectural enforcement for AI coding assistants (Cursor, ChatGPT, etc.) in a pure HTML/CSS/JS codebase.
*/



# Cursor Ruleset: Smart ESLint + Shell Safety Mode


# === SYSTEM OVERVIEW ===
STACK: Pure JavaScript (ES2020+), HTML5, CSS3
MODULE FORMAT: ESM (ECMAScript Modules)
TYPECHECKING: JSDoc + jsconfig.json
LINTING: ESLint (strict), Dependency-Cruiser (module integrity)

# === GLOBAL RULES ===
- ‚ùå No frameworks (e.g., React, Vue, Angular)
- ‚ùå No TypeScript
- ‚úÖ Use JSDoc exclusively for typing
- ‚úÖ All imports use relative ESM paths (e.g., `../utils/logger.js`)
- ‚úÖ Source files must reside in /src
  - /src/js
  - /src/css
  - /src/html
  - /src/assets

# === FILE SIZE & STRUCTURE ===
- üìè MAX: 500 lines per module
- üì¶ Split responsibilities into focused modules (e.g., `/battle_log`, `/turn_handler`)
- üß† Use `/index.js` files as public APIs for each layer

# === NAMING CONVENTIONS ===
- Filenames: kebab-case
- Functions: camelCase
- Constants: UPPER_SNAKE_CASE
- Types (JSDoc): PascalCase via `@typedef`

# === LAYERED MODULE BOUNDARIES ===
## ENGINE (src/js/engine)
- Handles game mechanics, battle logic, simulation
- ‚ùå Cannot import from /ui or /css
- ‚úÖ Can import from /utils, /data, /ai

## UI (src/js/ui)
- Handles rendering, DOM updates, animations
- ‚úÖ Can import from /utils
- ‚ùå Cannot import from /engine or /ai

## AI (src/js/ai)
- CPU decision trees, combat behavior
- ‚úÖ Can import from /engine, /utils, /data
- ‚ùå Cannot import from /ui

## DATA (src/js/data)
- Character definitions, movesets, static maps
- ‚úÖ Can import from /utils
- ‚ùå Must not import from /engine, /ui, or /ai

## UTILS (src/js/utils)
- Reusable pure functions, random number helpers, loggers
- ‚úÖ Can only import other /utils

# === TYPE ANNOTATIONS ===
- ‚úÖ All exported functions must use `@param`, `@returns`
- ‚úÖ All domain types live in `/src/js/types`
- ‚ùå No ESM imports for types; use `@typedef` or `@import` in JSDoc

# === INLINE DOCUMENTATION ===

## PURPOSE
Explain "why" the code exists, not "what" it does. Avoid rephrasing syntax‚Äîhighlight decisions, assumptions, and risks.

## REQUIRED LOCATIONS
- Top of all exported functions (with JSDoc)
- Above multi-branch logic, edge-case handling
- Around all magic numbers/constants
- At any known workaround, hack, or legacy patch
- Where performance concerns influence implementation

## FORMATTING RULES
- ‚úÖ Full punctuation and sentences
- ‚úÖ Block comments for flow logic (`/** */`)
- ‚ùå No end-of-line `//` comments unless extremely short
- ‚úÖ Use `/** JSDoc */` for functions and public utilities

## BANNED PRACTICES
- ‚ùå No commented-out code (`git` remembers)
- ‚ùå No historical notes like ‚Äúwas using this‚Äù
- ‚ùå No restating variable names (e.g., `i++ // increment i`)
- ‚ùå No humor or sarcasm in inline comments

## EXAMPLES

‚ùå Bad:
    i++; // increment i

‚úÖ Good:
    i++; // Skip placeholder at index 0

‚úÖ JSDoc:
/**
 * Calculates final attack value after elemental bonuses.
 * Assumes base damage has already been scaled by momentum.
 *
 * @param {Fighter} attacker
 * @param {Fighter} defender
 * @returns {number}
 */

# === AI REFACTORING INSTRUCTIONS ===

## Universal AI Prompt Format (for ChatGPT or Cursor)
You are now operating under the Avatar Battle Arena architecture rules.
All modules must remain under 500 lines. If refactoring, move logic to a new file under the correct layer, update imports/exports globally, and ensure nothing breaks.
Respect existing layering constraints and verify JSDoc + lint compatibility.

If fixing inline documentation:
- Preserve all domain logic
- Remove outdated notes
- Convert end-of-line comments to block headers where appropriate
- Use full JSDoc for public functions

Example JSDoc for all exported functions is required. Use @typedef from /types files where needed.

## Cursor Refactoring Rule:
Refactor logic in [FILE A] into a new module [FILE B], under the correct layer. Update all `import`/`export` paths. Verify that:
1. Each function is properly exported and imported
2. Original file is trimmed and no longer exports the moved logic
3. JSDoc annotations are preserved or improved
4. All inline comments follow formatting rules
5. No file exceeds 500 lines

# === DIAGNOSTIC PROMPTS ===

## Check and Fix Inline Comments (Cursor)
Scan this file for inline comments that:
1. Restate obvious logic
2. Are outdated, redundant, or misleading
3. Violate formatting or tone rules

Rewrite valid comments using full sentences and technical tone.
Add JSDoc annotations for all exported functions.

## Check All Inline Comments in Project
    grep -R "//" ./src | less
"""

# Write to file
file_path = Path("/mnt/data/cursor_rules.txt")
file_path.write_text(cursor_rules_text.strip())

file_path


# === TEMPORARY FIXES & BANDAIDS POLICY ===

All provisional solutions (hacks, workarounds, bandaids) MUST:

1. ‚úÖ Be explicitly **flagged in code comments** using `// TEMP_FIX:` or `// FIXME:` at the top of the block.
2. ‚úÖ Include a clear description of:
    - WHY the fix was necessary (technical blocker, time constraint, etc.)
    - WHAT the ideal long-term solution would be.
    - WHEN or under what condition it should be revisited.
3. ‚úÖ Be included in the module‚Äôs `README.md` under a `## Known Workarounds` section.
4. ‚úÖ Be **automatically surfaced to the user**, if possible, during AI editing (e.g., as a notice: "This function contains a TEMP_FIX. Consider resolving it post-deployment.")
5. ‚úÖ Be written in clean, maintainable style even if temporary‚Äîno rushed or obfuscated logic.

üß† Soft Rule of Thumb:
If you had to add a TODO, conditional, or mutation that feels wrong‚Äîassume it's a TEMP_FIX and document accordingly.

üõ†Ô∏è Example:
```js
// TEMP_FIX: Bypassing deep clone because circular references crash `safeClone`.
// TODO: Implement a clone strategy with reference map support.
const shallowCopy = { ...battleState };
‚ùå Forbidden:

Undocumented temp fixes or silent hacks

Leaving bandaids in production without surfacing the issue

Using // TODO alone without rationale and resolution plan


# DRY (Don't Repeat Yourself) principle. 

Look for:
- Duplicated code blocks or similar function bodies across different files or components
- Repeated literals or constants that should be extracted
- Any logic that's duplicated with slight variations
- Potential helper functions that could be abstracted
- Multiple re-implementations of the same functionality (e.g., date formatting, input validation)

Flag each instance and suggest:
- A refactor strategy (e.g., extract a function, centralize constants)
- A common module or location where the logic should live
- How many lines would be saved by applying the refactor

Do not focus on formatting or linting issues. Just DRY-related patterns.