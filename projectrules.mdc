# BEST PRACTICES DOC REFERENCE POLICY

- All contributors, automations, and the AI must refer to [docs/BEST PRACTICES.MD](./docs/BEST%20PRACTICES.MD) before asking the user for input or confirmation.
- All fixes, code hygiene, and process steps described in that document must be automated and applied without pausing for user approval, unless a true blocker or ambiguity is encountered.
- This rule takes precedence over default conventions and applies to all phases of development, review, and automation.

---

## AI Status Update Policy (2025-07-10)

- The AI must not pause or check in with the user for status updates, confirmations, or progress reports unless a true blocker is encountered or explicit user input is required (e.g., for creative content or ambiguous requirements).
- Previous pauses were due to over-cautious status checking and unnecessary confirmations, which are now explicitly prohibited.
- Proceed through all phases and tasks without interruption unless a genuine decision or user-supplied content is needed.

---

## Enforcement

# END_POLICY

## Lint/Error/Import/Export Cleanup Policy

- All linting, error correction, and import/export cleanup must be performed only AFTER all user-requested phases are fully implemented.
- During this cleanup phase, unless an issue is absolutely critical and blocks automation, do not ask for user confirmation to proceedâ€”automate the process.

## Automation & Linting

- After any code cleanup or refactor, the linter (npm run lint -- --max-warnings=0) must be run automatically by all contributors and automations, without asking for user permission.

## Coding, Testing, and Standards

- **Type Errors:**
  - All TypeScript type errors (from `npx tsc --noEmit`) must be fixed before or during any main update. Do not proceed with new features or merges if type errors are present.
- **Lint Warnings:**
  - Lint warnings (from `npm run lint -- --max-warnings=0`) should be addressed as part of ongoing work. It is acceptable to batch lint fixes as you go, but all warnings must be resolved before any commit or merge.
- **Test Failures:**
  - Test failures must be resolved before any commit or merge. It is acceptable to batch test fixes as you go, but do not merge with failing tests.
- **Preserve Existing Code:**
  Do not remove or alter unrelated code or functionality.
- **Use Explicit Variable Names:**
  Prefer descriptive, explicit names for readability.
- **Follow Consistent Coding Style:**
  Match the projectâ€™s established style (spacing, naming, etc).
- **Prioritize Performance:**
  Consider and optimize for performance in suggestions.
- **Security-First Approach:**
  Consider security with every change. No vulnerabilities or leaks.
- **Test Coverage:**
  Include or suggest robust unit tests for all new/changed logic.
- **Error Handling:**
  Implement robust error handling/loggingâ€”no silent failures.
- **Modular Design:**
  Encourage/reinforce modular, single-responsibility design.
- **Version Compatibility:**
  Ensure all suggestions are compatible with project versions.
- **Avoid Magic Numbers:**
  Use named constants instead of unexplained values.
- **Consider Edge Cases:**
  Always handle and document edge cases.
- **Use Assertions:**
  Use assertions to enforce assumptions/catch errors early.

# Critical/High Impact Lint Warnings to Always Fix

**The following issues are considered critical. The AI and all contributors must always fix these without asking for user confirmation. These are mandatory for code safety, correctness, and maintainability.**

---

## Type/Code Safety
- **Type Errors (tsc errors, not just linter):**
  - Any TypeScript error (type mismatch, missing type, unsafe any, invalid union, etc.).
  - no-unsafe-assignment, no-unsafe-member-access, no-unsafe-return
- **Usage of any Type:**
  - Unless absolutely necessary (and commented), all any types should be replaced with proper types or unknown.
  - @typescript-eslint/no-explicit-any
- **Unused Variables / Imports:**
  - Unused let, const, function, or import statements.
  - no-unused-vars, no-unused-imports
- **Shadowed Variable Declarations:**
  - Variables declared in an inner scope that override outer scope variables.
  - no-shadow
- **Unreachable Code:**
  - Code after return, throw, break, or continue.
  - no-unreachable
- **Duplicate Case Labels:**
  - Two identical case labels in a switch block.
  - no-duplicate-case
- **Duplicate Imports:**
  - Multiple imports of the same module.
  - no-duplicate-imports
- **Cyclic Imports/Dependencies:**
  - Imports that cause a circular reference (can crash apps or break HMR).
  - Use tools like madge or dependency-cruiser.

## React-Specific
- **Missing key Prop in Lists:**
  - All elements in an array should have a unique key prop.
  - react/jsx-key
- **Direct DOM Mutation:**
  - Donâ€™t modify the DOM outside Reactâ€™s render cycle.
- **Deprecated Lifecycle Methods:**
  - Donâ€™t use old lifecycle methods (e.g., componentWillMount).
- **Invalid Hooks Usage:**
  - Hooks must be called at the top level, never inside loops or conditions.
  - react-hooks/rules-of-hooks

## Logic, Bug, or Security Risks
- **No Await in Async Function:**
  - Declaring a function as async but never using await inside.
  - require-await
- **No Console (in Production):**
  - Remove console.log, console.error, etc. in production code.
  - no-console
- **No Debugger:**
  - Never leave debugger; in code.
- **No Implicit Returns:**
  - Every code path in a function should explicitly return a value or not return at all.
  - consistent-return
- **Promise Handling:**
  - Unhandled promises can cause silent errors.
  - no-floating-promises (with plugins)
- **No Unused Expressions:**
  - Expressions that donâ€™t do anything, e.g., foo;
  - no-unused-expressions
- **No Fallthrough in Switch:**
  - Make sure to explicitly handle or comment intentional fallthrough.
  - no-fallthrough

## Formatting/Structure (High Impact, Not Cosmetic)
- **Inconsistent or Invalid Import Paths:**
  - Broken imports break builds.
- **Mixed Tabs/Spaces or Indentation Errors:**
  - Can break rendering or cause weird diffs.

## Accessibility (If User-Facing UI)
- **Missing Alt Attributes:**
  - <img> tags must have alt text.
  - jsx-a11y/alt-text
- **No ARIA Violations:**
  - Use the right ARIA roles, labels, etc.
- **Label and Input Mismatch:**
  - <label> must be linked to a form control.

---

**These rules are non-negotiable. All contributors, automations, and the AI must always fix these issues immediately and without user confirmation.**

---

## Command Execution Policy

- **Mandatory --force Usage:**
  All terminal commands that modify state (e.g., git, npm, file operations) must use --force or the equivalent force flag by default. This applies to all contributors, automations, and tools. If a command supports a force flag, it must be included unless explicitly instructed otherwise.

---

#LLM-Optimized Ruleset for Error-Free HTML, CSS, TS, TSX Coding
Editor Setup ðŸš€
Use VSCode with ESLint, TypeScript, Prettier plugins.

Enable real-time linting and type-checking on keystroke/save.

Set autofix on save for ESLint and Prettier.

Strict Configurations ðŸ”§
TypeScript (tsconfig.json):

json
Copy
Edit
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noUncheckedIndexedAccess": true,
    "forceConsistentCasingInFileNames": true
  }
}
Use utility types (Partial, Pick, etc.) and zod for runtime validation.

ESLint:

Use eslint-config-airbnb-typescript.

Rules:

"max-warnings": 0

@typescript-eslint/no-explicit-any: "error"

@typescript-eslint/no-unsafe-assignment: "error"

@typescript-eslint/explicit-module-boundary-types: "error"

Prettier:

json
Copy
Edit
{
  "singleQuote": true,
  "trailingComma": "es5",
  "printWidth": 80
}
Stylelint:

Use for CSS/SCSS syntax checking.

Workflow Rules ðŸ“‹
Fix as you go: Never ignore editor warnings; resolve red/yellow squiggles immediately.

No placeholders: Declare variables/functions with intent; delete unused code instantly.

Type everything: All functions/components must have typed inputs/outputs, especially all exports.

Scoped CSS: Use CSS Modules or CSS-in-JS (e.g., styled-components) to avoid class name collisions.

Pre-commit hooks (lint-staged):

json
Copy
Edit
{
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": ["eslint --fix", "tsc --noEmit"],
    "*.{css,scss}": ["stylelint --fix"],
    "*.html": ["prettier --write"]
  }
}
Use Husky + lint-staged to block commits with errors.

Testing & Validation ðŸ§ª
Write unit tests with Jest and React Testing Library for TSX components.

Use snapshot testing judiciously to catch UI changes (donâ€™t blindly accept snapshots).

Set minimum test coverage (e.g., 80%+).

Set up CI/CD (GitHub Actions or similar) to run lint, type-check, and tests on push/PR.

Team Consistency ðŸ‘¥
Share ESLint, Prettier, and TypeScript configs in the repo.

Document setup and rules in CONTRIBUTING.md.

Use Storybook for all reusable components to reduce duplication and document usage.

Outcome ðŸŽ¯
No errors/warnings: Real-time feedback, strict rules, and automation make bad code impossible.

Consistent code: Unified formatting and practices across the team.

No batch lint-fixing ever required: Technical debt canâ€™t accumulate.

Follow this and youâ€™ll never need another code cleanup pass.
No batch lint-fixing ever required: Technical debt canâ€™t accumulate.

Follow this and youâ€™ll never need another code cleanup pass.

## Unused Code Removal
- Always remove all unused imports, types, and variables (including dead types and symbols) as part of every lint pass. No unused code or cruft allowed in the codebase.