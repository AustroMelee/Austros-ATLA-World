diff --git a/src/components/Collections/CollectionCardButton.tsx b/src/components/Collections/CollectionCardButton.tsx
new file mode 100644
index 0000000..0827002
--- /dev/null
+++ b/src/components/Collections/CollectionCardButton.tsx
@@ -0,0 +1,24 @@
+import React from 'react';
+
+interface Props {
+  isInCollection: boolean;
+  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;
+}
+
+export default function CollectionCardButton({ isInCollection, onClick }: Props) {
+  const baseClasses = 'absolute top-2 right-2 flex items-center justify-center w-6 h-6 bg-black/40 backdrop-blur-sm border border-[#70ab6c]/20 rounded-full transition-all';
+  const hoverClasses = 'hover:text-[#c8ffc8] hover:shadow-[0_0_15px_rgba(112,171,108,0.4)]';
+  const activeClasses = 'text-[#c8ffc8] shadow-[0_0_15px_rgba(112,171,108,0.4)]';
+  const inactiveClasses = 'text-[#70ab6c] shadow-[0_0_10px_rgba(112,171,108,0.2)]';
+
+  return (
+    <button
+      type="button"
+      aria-label={isInCollection ? 'Manage in collections' : 'Add to collection'}
+      onClick={onClick}
+      className={`${baseClasses} ${hoverClasses} ${isInCollection ? activeClasses : inactiveClasses}`}
+    >
+      {isInCollection ? 'âœ“' : '+'}
+    </button>
+  );
+}

diff --git a/src/components/Collections/AddToCollectionPopover.tsx b/src/components/Collections/AddToCollectionPopover.tsx
new file mode 100644
index 0000000..f909abc
--- /dev/null
+++ b/src/components/Collections/AddToCollectionPopover.tsx
@@ -0,0 +1,40 @@
+import React from 'react';
+import type { Collection } from '../../types/domainTypes';
+
+interface Props {
+  collections: Collection[];
+  cardId: string;
+  addCard: (collectionId: string, cardId: string) => void;
+  removeCard: (collectionId: string, cardId: string) => void;
+  onCreateNew: () => void;
+}
+
+export default function AddToCollectionPopover({ collections, cardId, addCard, removeCard, onCreateNew }: Props) {
+  return (
+    <div 
+      className="absolute top-10 right-2 w-48 bg-black/80 backdrop-blur-sm border border-[#70ab6c]/20 rounded shadow-lg p-2 z-20 text-sm text-[#c8ffc8] crt-screen"
+      onClick={(e) => e.stopPropagation()}
+    >
+      <button type="button" className="w-full text-left p-1 rounded hover:bg-[#70ab6c]/20" onClick={onCreateNew}>
+        + Create new collection
+      </button>
+      <hr className="border-t border-[#70ab6c]/20 my-1"/>
+      <ul>
+        {collections.map(col => {
+          const checked = col.cardIds.includes(cardId);
+          return (
+            <li key={col.id} className="flex items-center gap-2 p-1 rounded hover:bg-[#70ab6c]/20 cursor-pointer" onClick={() => checked ? removeCard(col.id, cardId) : addCard(col.id, cardId)}>
+              <input
+                type="checkbox"
+                readOnly
+                checked={checked}
+                className="pointer-events-none"
+              />
+              <span>{col.name}</span>
+            </li>
+          );
+        })}
+      </ul>
+    </div>
+  );
+}

diff --git a/src/hooks/useCollections.ts b/src/hooks/useCollections.ts
new file mode 100644
index 0000000..8178c46
--- /dev/null
+++ b/src/hooks/useCollections.ts
@@ -0,0 +1,69 @@
+import { useState, useEffect, useCallback } from 'react';
+import type { Collection } from '../types/domainTypes';
+
+const STORAGE_KEY = 'austros-atla-collections';
+
+export interface UseCollectionsReturn {
+  collections: Collection[];
+  getCollectionsForCard: (cardId: string) => Collection[];
+  isCardInAnyCollection: (cardId: string) => boolean;
+  createCollection: (name: string, initialCardId?: string) => void;
+  addCardToCollection: (collectionId: string, cardId: string) => void;
+  removeCardFromCollection: (collectionId: string, cardId: string) => void;
+}
+
+export function useCollections(): UseCollectionsReturn {
+  const [collections, setCollections] = useState<Collection[]>([]);
+
+  useEffect(() => {
+    try {
+      const raw = localStorage.getItem(STORAGE_KEY);
+      if (raw) setCollections(JSON.parse(raw));
+    } catch (err) { console.error('Failed to load collections', err); }
+  }, []);
+
+  const persist = useCallback((cols: Collection[]) => {
+    setCollections(cols);
+    try {
+      localStorage.setItem(STORAGE_KEY, JSON.stringify(cols));
+    } catch (err) { console.error('Failed to save collections', err); }
+  }, []);
+
+  const createCollection = useCallback((name: string, initialCardId?: string) => {
+    const trimmed = name.trim();
+    if (!trimmed || collections.some(c => c.name.toLowerCase() === trimmed.toLowerCase())) return;
+    const newCol: Collection = {
+      id: `c${Date.now().toString(36)}`,
+      name: trimmed,
+      createdAt: new Date().toISOString(),
+      cardIds: initialCardId ? [initialCardId] : [],
+    };
+    persist([...collections, newCol]);
+  }, [collections, persist]);
+
+  const addCardToCollection = useCallback((collectionId: string, cardId: string) => {
+    const updated = collections.map(c => 
+      c.id === collectionId && !c.cardIds.includes(cardId) 
+        ? { ...c, cardIds: [...c.cardIds, cardId] } 
+        : c
+    );
+    persist(updated);
+  }, [collections, persist]);
+
+  const removeCardFromCollection = useCallback((collectionId: string, cardId: string) => {
+    const updated = collections.map(c => 
+      c.id === collectionId 
+        ? { ...c, cardIds: c.cardIds.filter(cid => cid !== cardId) } 
+        : c
+    );
+    persist(updated);
+  }, [collections, persist]);
+  
+  const getCollectionsForCard = useCallback((cardId: string) => 
+    collections.filter(c => c.cardIds.includes(cardId)), [collections]);

+  const isCardInAnyCollection = useCallback((cardId: string) => 
+    collections.some(c => c.cardIds.includes(cardId)), [collections]);

+  return { collections, createCollection, addCardToCollection, removeCardFromCollection, getCollectionsForCard, isCardInAnyCollection };
+}

diff --git a/src/types/domainTypes.ts b/src/types/domainTypes.ts
index fb07057..fee1423 100644
--- a/src/types/domainTypes.ts
+++ b/src/types/domainTypes.ts
@@ -128,6 +128,15 @@ export type EnrichedRecord =
   | EnrichedFood
   | EnrichedLocation
   | EnrichedSpiritWorld;
+
+export interface Collection {
+  id: string;
+  name: string;
+  description?: string;
+  icon?: string; // Matrix-theme compatible icon/emoji
+  createdAt: string; // ISO 8601 string
+  cardIds: string[];
+} 