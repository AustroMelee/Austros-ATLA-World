diff --git a/src/components/CustomMarkdownRenderer.tsx b/src/components/CustomMarkdownRenderer.tsx
index 7659fe490c782329060b3e75d652deae2ffdc01b..bb8fbabc84da2edc4ac43190beaf5b313af84b53 100644
--- a/src/components/CustomMarkdownRenderer.tsx
+++ b/src/components/CustomMarkdownRenderer.tsx
@@ -1,48 +1,53 @@
 import React from 'react';
 import ReactMarkdown from 'react-markdown';
 import remarkGfm from 'remark-gfm';
+import rehypeRaw from 'rehype-raw';
 import { FaBookOpen, FaStar, FaHandshake, FaTheaterMasks, FaMagic } from 'react-icons/fa';
 
 interface CustomMarkdownRendererProps {
   markdown: string;
+  query: string;
 }
-
-export function CustomMarkdownRenderer({ markdown }: CustomMarkdownRendererProps) {
+export function CustomMarkdownRenderer({ markdown, query }: CustomMarkdownRendererProps) {
+  const processed = query
+    ? markdown.replace(new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi'), '<mark class="bg-yellow-400 text-black">$1</mark>')
+    : markdown;
   return (
     <ReactMarkdown
       remarkPlugins={[remarkGfm]}
+      rehypePlugins={[rehypeRaw]}
       components={{
         h3: (props) => {
           const text = String(props.children).toLowerCase();
           let icon = null;
           if (text.includes('overview')) icon = <FaBookOpen className="inline-block align-middle text-blue-400 mr-2" size={18} />;
           else if (text.includes('narrative')) icon = <FaMagic className="inline-block align-middle text-purple-400 mr-2" size={18} />;
           else if (text.includes('role')) icon = <FaTheaterMasks className="inline-block align-middle text-pink-400 mr-2" size={18} />;
           else if (text.includes('relationships')) icon = <FaHandshake className="inline-block align-middle text-green-400 mr-2" size={18} />;
           else if (text.includes('notable')) icon = <FaStar className="inline-block align-middle text-yellow-400 mr-2" size={18} />;
           return (
             <h3 className="text-lg font-semibold mt-6 mb-3 flex items-center gap-2">
               {icon}
               <span className="align-middle">{props.children}</span>
             </h3>
           );
         },
         ul: (props) => (
           <ul className="list-disc pl-6 space-y-1 text-sm text-gray-200 border-t border-white/10 pt-4 mt-4" {...props} />
         ),
         li: (props) => (
           <li className="leading-snug" {...props} />
         ),
         strong: (props) => (
           <strong className="font-semibold text-white" {...props} />
         ),
         em: (props) => (
           <em className="italic text-blue-300" {...props} />
         ),
         p: (props) => (
           <p className="mt-4 mb-2" {...props} />
         ),
       }}
-    >{markdown}</ReactMarkdown>
+    >{processed}</ReactMarkdown>
   );
 }
diff --git a/src/components/EntityGrid/EntityGrid.tsx b/src/components/EntityGrid/EntityGrid.tsx
index 45ed2f4f72589565cf2dda7685f4b846f7fdbaf9..34105bf4a5913f0ee9c10d022efb13ba4819e34d 100644
--- a/src/components/EntityGrid/EntityGrid.tsx
+++ b/src/components/EntityGrid/EntityGrid.tsx
@@ -1,26 +1,42 @@
 // CARD SIZE POLICY: The width of each card in the grid is controlled by the Tailwind class `w-[188px]` applied to the card container div below. To change card size globally, update this value here. All internal content in ItemCard is sized relative to this width for visual consistency.
-import React from 'react';
+import React, { useRef } from 'react';
+import { useVirtualizer } from '@tanstack/react-virtual';
 import ItemCard from '../ItemCard/ItemCard';
 import type { GridItem } from '../../types/grid';
 
 interface EntityGridProps {
   items: GridItem[];
   expandedCardId: string | null; // <-- Add prop
   onCardExpand: (cardId: string) => void; // <-- Add prop
+  query: string;
 }
 
-export default function EntityGrid({ items, expandedCardId, onCardExpand }: EntityGridProps) {
+export default function EntityGrid({ items, expandedCardId, onCardExpand, query }: EntityGridProps) {
+  const parentRef = useRef<HTMLDivElement>(null);
+  const rowVirtualizer = useVirtualizer({
+    count: items.length,
+    getScrollElement: () => parentRef.current,
+    estimateSize: () => 260,
+  });
+
   return (
-    <div className="flex flex-wrap justify-center gap-4 p-4">
-      {items.map((gridItem) => (
-        <ItemCard
-          key={gridItem.record.id}
-          item={gridItem.record}
-          matchedFields={gridItem.matchedFields}
-          expanded={gridItem.record.id === expandedCardId}
-          onExpand={() => onCardExpand(gridItem.record.id)}
-        />
-      ))}
+    <div ref={parentRef} style={{ height: '100%', overflow: 'auto' }}>
+      <div style={{ height: `${rowVirtualizer.getTotalSize()}px`, position: 'relative' }} className="relative">
+        {rowVirtualizer.getVirtualItems().map((virtualItem) => (
+          <div
+            key={virtualItem.key}
+            style={{ position: 'absolute', top: 0, left: 0, width: '100%', transform: `translateY(${virtualItem.start}px)` }}
+          >
+            <ItemCard
+              item={items[virtualItem.index].record}
+              matchedFields={items[virtualItem.index].matchedFields}
+              expanded={items[virtualItem.index].record.id === expandedCardId}
+              onExpand={() => onCardExpand(items[virtualItem.index].record.id)}
+              query={query}
+            />
+          </div>
+        ))}
+      </div>
     </div>
   );
 }
diff --git a/src/components/ItemCard/ItemCard.tsx b/src/components/ItemCard/ItemCard.tsx
index 15ea55b7e98f925b56a1f5e5137e532b951fab30..7b827b00f4a84c71c2fdfeb173bcb7f30cee240e 100644
--- a/src/components/ItemCard/ItemCard.tsx
+++ b/src/components/ItemCard/ItemCard.tsx
@@ -1,24 +1,25 @@
 import React from 'react';
 import type { EnrichedEntity } from '../../search/types';
 import ItemCardCollapsed from './ItemCardCollapsed';
 import ItemCardModal from './ItemCardModal';
 
 interface MatchedField {
   field: string;
   token: string;
 }
 
 interface ItemCardProps {
   item: EnrichedEntity;
   expanded: boolean;
   onExpand: () => void;
   matchedFields?: MatchedField[];
+  query: string;
 }
 
-export default function ItemCard({ item, expanded, onExpand, matchedFields }: ItemCardProps) {
+export default function ItemCard({ item, expanded, onExpand, matchedFields, query }: ItemCardProps) {
   return expanded ? (
-    <ItemCardModal item={item} onClose={onExpand} />
+    <ItemCardModal item={item} query={query} onClose={onExpand} />
   ) : (
-    <ItemCardCollapsed item={item} matchedFields={matchedFields} onExpand={onExpand} />
+    <ItemCardCollapsed item={item} matchedFields={matchedFields} onExpand={onExpand} query={query} />
   );
 }
diff --git a/src/components/ItemCard/ItemCardCollapsed.tsx b/src/components/ItemCard/ItemCardCollapsed.tsx
index 8ab6544b4429caa5bbe9a8a7e6084b536a9d42f4..8e21df95578dde73aaa31b53a76670053233715f 100644
--- a/src/components/ItemCard/ItemCardCollapsed.tsx
+++ b/src/components/ItemCard/ItemCardCollapsed.tsx
@@ -1,52 +1,55 @@
 import React, { useEffect } from 'react';
 import type { EnrichedEntity } from '../../search/types';
 import ThemedCard from '../ThemedCard/ThemedCard';
 import NationIcon from '../NationIcon/NationIcon';
 import { toTitleCase, getInitials } from '../../utils/stringUtils';
 import { useImageFallback } from '../../hooks/useImageFallback';
 import { fallbackImages, universalFallback } from './imageFallbacks';
 import { getField } from '../../utils/data';
 
 interface MatchedField {
   field: string;
   token: string;
 }
 
 interface ItemCardCollapsedProps {
   item: EnrichedEntity;
   onExpand: () => void;
   matchedFields?: MatchedField[];
+  query: string;
 }
 
 
 function formatFieldName(field: string) {
   if (field === 'global') return 'Content';
   return toTitleCase(field.replace('metadata.', ''));
 }
 
-export default function ItemCardCollapsed({ item, onExpand, matchedFields }: ItemCardCollapsedProps) {
+import TextHighlighter from '../../utils/TextHighlighter';
+
+export default function ItemCardCollapsed({ item, onExpand, matchedFields, query }: ItemCardCollapsedProps) {
   const iconText = (item.name && typeof item.name === 'string') ? getInitials(item.name) : '';
   const role = getField(item, 'role');
   const nation = getField(item, 'nation');
   const slug = getField(item, 'slug');
   const image = getField(item, 'image');
   const slugKey = (slug || item.id) as string;
   const { imgSrc, status, handleImageError, handleImageLoad, setImgSrc } = useImageFallback(slugKey, {
     [slugKey]: fallbackImages[slugKey] || fallbackImages[item.id] || universalFallback,
   });
 
   useEffect(() => {
     if (image) {
       setImgSrc(`/assets/images/${image}`);
     }
   }, [image, setImgSrc]);
 
   const hasRole = role && String(role).trim();
 
   return (
     <div
       onClick={onExpand}
       role="button"
       tabIndex={0}
       aria-label={`Expand details for ${item.name}`}
       onKeyDown={e => { if (e.key === 'Enter' || e.key === ' ') onExpand(); }}
@@ -74,42 +77,42 @@ export default function ItemCardCollapsed({ item, onExpand, matchedFields }: Ite
           </div>
           {hasRole && (
             <div className="flex justify-center -mt-3.5 z-10">
               <div className="bg-neutral-900/80 backdrop-blur-sm rounded flex items-center justify-center text-center p-1.5 border border-white/20 shadow-lg">
                 <span className="text-white text-[12px] font-bold leading-none">
                   {role}
                 </span>
               </div>
             </div>
           )}
           {matchedFields && matchedFields.length > 0 && (
             <div className="mt-1.5 flex flex-wrap justify-center gap-1">
               {matchedFields.map((match, index) => (
                 <span
                   key={`${match.field}-${index}`}
                   className="bg-neutral-700 text-neutral-300 text-[10px] font-medium px-1.5 py-0.5 rounded-full"
                 >
                   Matched: {formatFieldName(match.field)}
                 </span>
               ))}
             </div>
           )}
           <div className="w-full mt-auto px-1.5 pt-2.5">
             <div className="flex items-center justify-start gap-1">
               <h3 className="font-bold text-lg text-white whitespace-normal line-clamp-2">
-                {toTitleCase(item.name)}
+                <TextHighlighter text={toTitleCase(item.name)} query={query} />
               </h3>
               {nation && (
                 <NationIcon
                   nation={nation}
                   size={8}
                   className="align-middle flex-shrink-0"
                 />
               )}
             </div>
             <p className="text-[12px] text-neutral-400 font-bold mt-1">Character</p>
           </div>
         </div>
       </ThemedCard>
     </div>
   );
 } 
\ No newline at end of file
diff --git a/src/components/ItemCard/ItemCardModal.tsx b/src/components/ItemCard/ItemCardModal.tsx
index bff8f371b0fff1dc3e8a229e97e706bfe30696a0..59fe33d2d7ac1edef968b709558bdc15264c6fa5 100644
--- a/src/components/ItemCard/ItemCardModal.tsx
+++ b/src/components/ItemCard/ItemCardModal.tsx
@@ -1,42 +1,44 @@
 import React, { useEffect } from 'react';
 import type { EnrichedEntity } from '../../search/types';
 import ThemedCard from '../ThemedCard/ThemedCard';
 import NationIcon from '../NationIcon/NationIcon';
 import { toTitleCase } from '../../utils/stringUtils';
+import TextHighlighter from '../../utils/TextHighlighter';
 import { CustomMarkdownRenderer } from '../CustomMarkdownRenderer';
 import { useImageFallback } from '../../hooks/useImageFallback';
 import { fallbackImages, universalFallback } from './imageFallbacks';
 import { getField } from '../../utils/data';
 
 interface ItemCardModalProps {
   item: EnrichedEntity;
   onClose: () => void;
+  query: string;
 }
 
 
-export default function ItemCardModal({ item, onClose }: ItemCardModalProps) {
+export default function ItemCardModal({ item, onClose, query }: ItemCardModalProps) {
   const role = getField(item, 'role');
   const nation = getField(item, 'nation');
   const slug = getField(item, 'slug');
   const image = getField(item, 'image');
   const slugKey = (slug || item.id) as string;
   const { imgSrc, status, handleImageError, handleImageLoad, setImgSrc } = useImageFallback(slugKey, {
     [slugKey]: fallbackImages[slugKey] || fallbackImages[item.id] || universalFallback,
   });
 
   useEffect(() => {
     if (image) {
       setImgSrc(`/assets/images/${image}`);
     }
   }, [image, setImgSrc]);
 
   return (
     <div
       className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75"
       role="dialog"
       aria-modal="true"
     >
       <div
         className="relative w-11/12 max-w-2xl max-h-[90vh] overflow-y-auto rounded-lg"
         role="document"
       >
@@ -44,40 +46,40 @@ export default function ItemCardModal({ item, onClose }: ItemCardModalProps) {
           onClick={onClose}
           className="absolute top-4 right-4 z-10 bg-neutral-800 text-white rounded-full p-2 hover:bg-neutral-700 focus:outline-none focus:ring-2 focus:ring-white"
           aria-label="Close expanded card"
         >
           <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>
         </button>
         <ThemedCard nation={nation}>
           <div className="flex flex-col p-4 md:p-6">
             <div className="w-full mb-4">
               {status === 'error' || !imgSrc ? (
                 <div className="w-full h-auto max-h-80 flex items-center justify-center rounded-lg bg-neutral-700">
                   <span className="font-bold text-subtle text-4xl">?</span>
                 </div>
               ) : (
                 <img
                   src={imgSrc}
                   alt={item.name}
                   className="w-full h-auto max-h-80 object-contain rounded-lg mx-auto"
                   onError={handleImageError}
                   onLoad={handleImageLoad}
                 />
               )}
             </div>
             <div className="w-full">
               <h2 className="text-3xl font-bold text-center md:text-left">
-                {toTitleCase(item.name)}
+                <TextHighlighter text={toTitleCase(item.name)} query={query} />
                 {nation && <NationIcon nation={nation} size={20} className="align-middle flex-shrink-0 ml-2" />}
               </h2>
               {role && <p className="text-lg text-neutral-400 mb-4 text-center md:text-left font-bold">{role}</p>}
               <hr className="border-gray-700 my-4" />
               <div className="prose prose-invert max-w-none">
-                <CustomMarkdownRenderer markdown={getField(item, 'expandedView') || ''} />
+                <CustomMarkdownRenderer markdown={getField(item, 'expandedView') || ''} query={query} />
               </div>
             </div>
           </div>
         </ThemedCard>
       </div>
     </div>
   );
 }
\ No newline at end of file
diff --git a/src/hooks/useSearch.ts b/src/hooks/useSearch.ts
index 9c8a27b1f38f4ca6ef9e49271c2a1fd3585ebfee..f7abac1fb725f3b12e9f19ba21fcc752c27d96d9 100644
--- a/src/hooks/useSearch.ts
+++ b/src/hooks/useSearch.ts
@@ -1,67 +1,90 @@
 import { useMemo } from 'react';
 import FlexSearch from 'flexsearch';
 import type { EnrichedEntity } from '../search/types';
 
 interface MatchedField {
   field: string;
   token: string;
 }
 
+function parseQuery(q: string) {
+  const filters = new Map<string, string>();
+  const keywords: string[] = [];
+  q.split(' ').forEach(part => {
+    if (part.includes(':')) {
+      const [key, value] = part.split(':', 2);
+      if (key && value) filters.set(key, value);
+    } else if (part.trim()) {
+      keywords.push(part);
+    }
+  });
+  return { mainQuery: keywords.join(' '), filters };
+}
+
 export function useSearch(
   allEntities: EnrichedEntity[],
   query: string,
 ): Array<{ entity: EnrichedEntity; matchedFields: MatchedField[] }> {
   // Build a map for quick lookup by id
   const entityMapById = useMemo(() => {
     const map = new Map<string, EnrichedEntity>();
     allEntities.forEach((entity) => map.set(entity.id, entity));
     return map;
   }, [allEntities]);
 
   // 1. Create a memoized FlexSearch index.
   const index = useMemo(() => {
     const newIndex = new FlexSearch.Document<EnrichedEntity>({
       document: {
         id: 'id',
         index: [
-          'name',
-          'nation',
-          'role',
-          'tags',
-          'bendingElement',
+          { field: 'name', boost: 5 },
+          { field: 'role', boost: 3 },
+          { field: 'tags', boost: 2 },
+          { field: 'nation', boost: 2 },
+          { field: 'expandedView', boost: 1 },
         ],
+        tag: ['nation', 'type', 'bendingElement'],
       },
       tokenize: 'forward',
     });
     allEntities.forEach((entity) => {
-      newIndex.add({ ...entity });
+      newIndex.add(entity);
     });
     return newIndex;
   }, [allEntities]);
 
   // 2. Perform the search and process the results.
   return useMemo(() => {
     if (!query) {
       return allEntities.map((entity) => ({ entity, matchedFields: [] }));
     }
-    const searchResults = index.search(query, { enrich: true }) as Array<{ field: string; result: string[] }>;
+
+    const { mainQuery, filters } = parseQuery(query);
+    const tagFilters = Array.from(filters.entries()).map(([key, value]) => ({ tag: key, value }));
+
+    const searchResults = index.search(mainQuery, {
+      enrich: true,
+      suggest: true,
+      tag: tagFilters,
+    }) as Array<{ field: string; result: string[] }>;
     const resultMap = new Map<string, { entity: EnrichedEntity; matchedFields: MatchedField[] }>();
     searchResults.forEach((fieldResult) => {
       const fieldName = fieldResult.field;
       fieldResult.result.forEach((id: string) => {
         const record = entityMapById.get(id);
         if (!record) return;
         if (!resultMap.has(id)) {
           resultMap.set(id, {
             entity: record,
-            matchedFields: [{ field: fieldName, token: query }],
+            matchedFields: [{ field: fieldName, token: mainQuery }],
           });
         } else {
           const existing = resultMap.get(id)!;
-          existing.matchedFields.push({ field: fieldName, token: query });
+          existing.matchedFields.push({ field: fieldName, token: mainQuery });
         }
       });
     });
     return Array.from(resultMap.values());
   }, [query, index, allEntities, entityMapById]);
 } 
\ No newline at end of file
diff --git a/src/pages/Home.tsx b/src/pages/Home.tsx
index e9071cc17803adc649cce4bc536a0c3412571f99..7c57394cea10cb2699d2c148363da2d508c707d0 100644
--- a/src/pages/Home.tsx
+++ b/src/pages/Home.tsx
@@ -25,34 +25,35 @@ export function Home({
   query,
   handleSearchChange,
   expandedCardId, // <-- Destructure prop
   onCardExpand, // <-- Destructure prop
 }: HomeProps) {
   // --- CORRECTED ADAPTER ---
   const gridItems: GridItem[] = searchResults.map((result) => ({
     record: result.entity,
     matchedFields: result.matchedFields,
   }));
   // --- END ADAPTER ---
 
 
   return (
     <Layout>
       <Navbar />
       <div className="flex flex-col items-center w-full">
         <SearchBar value={query} onChange={handleSearchChange} />
         {loading ? (
           <div className="mt-8 text-neutral-400">Loading...</div>
         ) : gridItems.length === 0 ? (
           <NoResults />
         ) : (
           <EntityGrid
             items={gridItems}
+            query={query}
             expandedCardId={expandedCardId}
             onCardExpand={onCardExpand}
           />
         )}
       </div>
     </Layout>
   );
 }
 
diff --git a/src/utils/TextHighlighter.tsx b/src/utils/TextHighlighter.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..6a7baa32b2367946ab8f38304882a91097b5439d
--- /dev/null
+++ b/src/utils/TextHighlighter.tsx
@@ -0,0 +1,26 @@
+import React from 'react';
+
+interface TextHighlighterProps {
+  text: string;
+  query: string;
+}
+
+export default function TextHighlighter({ text, query }: TextHighlighterProps) {
+  if (!query) return <>{text}</>;
+  const escaped = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
+  const regex = new RegExp(`(${escaped})`, 'gi');
+  const parts = text.split(regex);
+  return (
+    <span>
+      {parts.map((part, i) =>
+        regex.test(part) ? (
+          <mark key={i} className="bg-yellow-400 text-black">
+            {part}
+          </mark>
+        ) : (
+          part
+        )
+      )}
+    </span>
+  );
+}
