## **Implementation Plan: AVATAR ATLA WORLD ENCYCLOPEDIA (Context-Specific)**

This plan translates the Avatar Encyclopedia blueprint into a phased, step-by-step development process. Each step is designed to be a concrete, testable unit of work, tailored to the real data pipeline, type system, and UI architecture.

[START-COMPLETE]
### **Phase 0: Data Pipeline & Project Setup**

This foundational phase ensures robust, scalable, and type-safe data handling.
**1. Technology Stack Selection & Justification:**
    *   **Framework:** **React** (with Vite) for component-based, performant UI.
    *   **Language:** **TypeScript** for strict typing and maintainability.
    *   **Styling:** **Tailwind CSS** for utility-first, responsive design.
    *   **Search:** **FlexSearch** for fast, client-side full-text search.
    *   **Data Pipeline:** Custom scripts for Markdown → JSON → enrichment → search index.
    *   **Other:** ESLint, Prettier, Zod (for schema validation), and custom scripts for data processing.

**2. Data Pipeline Initialization:**
    *   **Task:** Author character and domain data in custom Markdown format in `/raw-data/characters/` and related folders.
    *   **Task:** Use `scripts/parse-character-md.mjs` to extract and flatten data into JSON.
    *   **Task:** Validate all JSON with Zod schemas (`raw-data/schema/`).
    *   **Task:** Enrich data (add slugs, ids, etc.) with `scripts/enrich-data.mjs`.
    *   **Task:** Build the FlexSearch index with `scripts/build-index.mjs`.
    *   **Task:** Output: `public/enriched-data.json` and `public/search-index.json`.

**3. Directory & File Structure:**
    *   **Task:** Maintain logical structure:
        *   `/src/components`: Reusable UI components (e.g., `ItemCard`, `EntityGrid`, `FilterSidebar`).
        *   `/src/hooks`: Custom React hooks (e.g., `useAustrosSearch`, `useDebounce`).
        *   `/src/search`: Search engine logic (e.g., `ClientSearchEngine.ts`).
        *   `/src/types`: Shared TypeScript interfaces (e.g., `EnrichedCharacter`, `EnrichedRecord`).
        *   `/src/styles`: Global CSS and Tailwind config.
        *   `/public`: Static assets and generated data files.

**4. Core Type Definitions:**
    *   **Task:** Define all domain types in `/src/types/` (e.g., `EnrichedCharacter`, `BendingArt`, etc.).
    *   **Task:** Ensure all data pipeline scripts and UI components use these types for type safety.

---

### **Phase 1: UI Foundation & Data Integration**

Goal: Display a working, filterable encyclopedia grid using real, validated data.

**5. Data Loading & Integration:**
    *   **Task:** Load enriched data and search index from `public/enriched-data.json` and `public/search-index.json` at app startup.
    *   **Task:** Use `ClientSearchEngine` to provide search and retrieval functions for the UI.

**6. Card Grid Display:**
    *   **Task:** Implement `ItemCard` to display character/domain info.
    *   **Task:** Implement `EntityGrid` to render a responsive grid of `ItemCard` components.
    *   **Task:** Use Tailwind for layout (no react-masonry-css needed).

**7. State Management & Filtering:**
    *   **Task:** Use React hooks (`useState`, `useMemo`, etc.) for all UI state (search query, filters, selection).
    *   **Task:** Implement filter state and logic in the main container (e.g., `HomeContainer`).
    *   **Task:** Ensure all filtering is performed on the loaded, enriched data.

**8. Search Integration:**
    *   **Task:** Implement `useAustrosSearch` and connect it to the FlexSearch index for fast, full-text search.
    *   **Task:** Ensure search results are type-safe and match the domain model.

**9. Filter Sidebar & Chips:**
    *   **Task:** Implement `FilterSidebar` to display available filters (e.g., nation, bending, role).
    *   **Task:** Implement `FilterTag` for filter chips (clickable, active/inactive states).
    *   **Task:** Dynamically generate filter options from the loaded data.
    *   **Task:** Chain filters: search → type filter → other filters.
    [END-COMPLETE]

---

### **Phase 2: Advanced Features & UX Enhancements**

Goal: Add intelligence, polish, and advanced user interactions.

**10. Advanced Search & Filtering:**
    *   **Task:** Enhance search logic in `ClientSearchEngine` for more nuanced queries (e.g., synonyms, tags).
    *   **Task:** Add support for multi-field and fuzzy search using FlexSearch features.

**11. Expanded Card View:**
    *   **Task:** Implement expanded detail view for characters/entities (modal or panel).
    *   **Task:** Ensure only one expanded card is visible at a time (SRP-compliant overlay logic).
    *   **Task:** Add keyboard and click-to-close support.

**12. Collections & Personalization:**
    *   **Task:** Implement collections logic (e.g., save favorite characters) using React state and localStorage if needed.
    *   **Task:** Add personalization features (recent searches, boosted results) as needed.

**13. Accessibility & Performance:**
    *   **Task:** Ensure all UI is accessible (ARIA labels, keyboard navigation).
    *   **Task:** Optimize for performance (memoization, lazy loading, etc.).

---

### **Phase 3: Polish & Documentation**

Goal: Ensure maintainability, clarity, and a robust developer experience.

**14. Documentation & Source of Truth:**
    *   **Task:** Keep `docs/source_of_truth.md` and related docs up to date with all data, type, and UI changes.
    *   **Task:** Document the data pipeline, type system, and filtering/search logic clearly.

**15. Automated Checks & Linting:**
    *   **Task:** Run all lint/type checks and data pipeline scripts before every commit.
    *   **Task:** Ensure zero lint/type errors and full data validation at all times.

---

**This plan is now fully aligned with the Avatar Encyclopedia's real architecture, data flow, and UI.**